name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    # Блок services аналогичен docker-compose.yml
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 
    # Этот шаг дополним переменными для доступа к БД
    - name: Test with flake8 and django tests
      # Добавляем env-переменные для доступа к БД
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        # Сервер БД запущен в Docker, но его порт проброшен на хост
        # Поэтому подключаемся к 127.0.0.1:5432
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test
# Добавляем новую задачу: деплой приложения
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Хорошо ли держать логин и пароль прямо в коде workflow?
          # Нет, это нехорошо
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: bauklu/taski_backend2:latest
  frontend_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      # Это готовый воркфлоу для установки Node.js на раннер
      uses: actions/setup-node@v3
      with:
        # Это параметр воркфлоу, указывающий нужную версию Node.js
        node-version: 18

    - name: Install dependencies
      # Эта команда устанавливает зависимости для фронтенда
      run: |
        cd frontend/
        npm ci

    - name: Test frontend
      # Запускаем тесты
      run: |
        cd frontend/
        npm run test
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: bauklu/taski_frontend:latest
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          # Тут вместо username должен быть ваш логин на Docker Hub
          tags: bauklu/taski_gateway:latest
  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех образов Taski
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "taski"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        #key: ${{ secrets.SSH_KEY }}
        key: -----BEGIN OPENSSH PRIVATE KEY-----
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
-----END OPENSSH PRIVATE KEY-----
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере, 
        # с которым установлено соединение
        script: |
          cd taski
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Выполняет миграции и сбор статики
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/ 
